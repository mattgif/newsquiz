// question bank (generated by questionBank.js)
const qBank = questionBank

// question and score tracker
const userData = {
	question: 0,
	posScore: 0,
	negScore: 0,	
	totalQuestions: 10,
	showFeedback: 1,
}

// Sets the field used to display questions and prompts
function setLegend (legendText) {	
	$('.answerForm').append(`<legend>${legendText}</legend>`)
}

// Renders the start screen for users' initial landing
function handleFirstVisit() {
	// clear out anything that might already be in quizbox
	$('.answerForm').empty()
	setLegend("You live in a weird world! Ready to find out how much you know about it?")	
	$('.answerForm').append('<div class=startButton><button class=\"startButton js-nextButton\">Let\'s go!</button></div>')
}

// Handles actions when next/start are clicked
function handleNextButton() {	
	$('.quizBox').on('click', '.js-nextButton', event => {		
		// checks to see if user has seen all questions		
		if (userData.question >= userData.totalQuestions) {
		handleFinal();
		} else {
		userData.question += 1;
		// toggles feedback display so new feedback elements will appear
		userData.showFeedback = 1;
		handleNewQuestion();
		};
	})	
}

// listener for answer buttons
function handleAnswerClicked() {		
	$('.answerForm').on('click','.answer', e=> {
		// checks to see if feedback already displayed
		if (userData.showFeedback) {
			userData.showFeedback = 0;
			let selectedAnswer = $(e.target).text()		
			let qNum = userData.question;
			let question = qBank[qNum-1];
			// sets correct to 1 or 0 depending on whether the answer is correct
			let correct = question.isCorrect(selectedAnswer);
			$(e.target).addClass('selected');
			handleFeedback(correct);
		}		
	});
}

// creates the footer with question number and current score
function createFooter() {	
	$('.answerForm').append(
		`
		<footer role="contentinfo">				
			<div class="pageCount">
				<p>Question ${userData.question} of ${userData.totalQuestions}</p>	
			</div>		
			<div class="score">
				<span class="posScore">+${userData.posScore}</span>  <span class="negScore">-${userData.negScore}</span>
			</div>
		</footer>
		`
	);						
}

function cleanup() {
	$('.answerForm').empty();
	$('footer').remove();	
	$('.nextButton').remove();
}

// Renders new question, answers, score, and page count
function handleNewQuestion() {
	// clear previous items
	cleanup()
	let qNum = userData.question;
	let question = qBank[qNum-1];
	let answers = question.generateAnswers()	
	// grabs the question at qNum index and sets the question text to qText
	setLegend(question.qText);

	// creates buttons for each answer
	for (let i=0;i<answers.length;i++) {
		$('.answerForm').append(`<button class=\"answer\">${answers[i]}</button>`)
	};

	// add footer
	createFooter();
}

// Listens for user input and generates feedback
function handleFeedback(correct) {	 	
	let qNum = userData.question;
	let question = qBank[qNum-1];
	let answers = $('.answer');
	const contextFeedback = {}
	// set appropriate feedback and adjust score
	if (correct) {
		contextFeedback.primary = 'Correct!';
		contextFeedback.secondary = "";
		userData.posScore += 1; 
	} else {
		contextFeedback.primary = 'Incorrect!';
		contextFeedback.secondary = ""
		userData.negScore += 1;
	}

	// redraw footer to display updated score
	$('footer').remove()
	createFooter()

	// add feedback box
	$('legend').after(
		`<div class="feedbackForm">			
			<p><span class="primaryFeedback">${contextFeedback.primary} </span><span class="secondaryFeedback">${contextFeedback.secondary}</span></p>			
		</div>
		<div class="nextButton js-nextButton">
			<button>next \></button>
		</div>`
	)

	// give it the appropriate class
	if (correct) {
		$('.feedbackForm').addClass("correct")
	} else {
		$('.feedbackForm').addClass("incorrect")
	}

	// animate answers hinging out
	for (let i=0;i<Object.keys(answers).length;i++) {
		let ansBut = answers[i];		
		let answer = $(ansBut).text();		
		if (question.isCorrect(answer)) {			
		} else {
			$(ansBut).addClass("animated hinge");
			// waits for animation to complete, then removes item (helps keyboardusers avoid offscreen buttons)
			setTimeout(function(){
				$(ansBut).remove();	
			},3000)			
		};
	}
}

// Renders a summary page with user score and start over button
function handleFinal() {		
	cleanup()

	// checks if we need to pluralize 'question'
	let positiveScore = userData.posScore + ' question';
	let negativeScore = userData.negScore + ' question';
	if (userData.posScore != 1) {
		positiveScore += 's'
	};
	if (userData.negscore !=1) {
		negativeScore += 's'
	}	
	$('.answerForm').append(
		`<legend>OK, let's see how you did:</legend>
		<div class="finalScore">
			<p>You got:</p>
			<p class="posScore">    ${positiveScore} correct</p>
			<p class="negScore">    ${negativeScore} incorrect</p>			
		</div>
		<button class="resetButton">Start over?</button>`		
	)

	// handle startover
	$('.resetButton').click(e => {
		userData.posScore = 0;
		userData.negscore = 0;
		userData.question = 0;
		handleFirstVisit();
	})

}

function handleQuiz() {
	$('.answerForm').submit(e => {
		e.preventDefault();
	})
	handleNextButton();
	handleAnswerClicked();	
	handleFirstVisit();	
}

$(handleQuiz())
